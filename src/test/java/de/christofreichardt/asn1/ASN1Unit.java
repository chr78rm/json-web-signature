package de.christofreichardt.asn1;

import de.christofreichardt.diagnosis.AbstractTracer;
import de.christofreichardt.diagnosis.Traceable;
import de.christofreichardt.diagnosis.TracerFactory;
import java.util.Arrays;
import java.util.HexFormat;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.stream.Stream;
import org.assertj.core.api.WithAssertions;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class ASN1Unit implements Traceable, WithAssertions {

    @BeforeAll
    void init() {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "init()");

        try {
        } finally {
            tracer.wayout();
        }
    }

    static byte[] convert(short[] values) {
        byte[] bytes = new byte[values.length];
        for (int i = 0; i < values.length; i++) {
            bytes[i] = (byte) values[i];
        }
        return bytes;
    }

    record ASN1_SignatureTestParam(byte[] encodedSeq, byte[] r, byte[] s) {}

    static Stream<ASN1_SignatureTestParam> encoded_ASN1_ES256_SignatureStream() {
        short[][] encodedASN1IntSequences = {
                {
                        0x30, 0x45,
                        0x02, 0x20,
                        0x52, 0x35, 0x22, 0x13, 0xdb, 0x3f, 0xe3, 0xe3, 0xe7, 0x53, 0x95, 0x65, 0x49, 0xcb, 0xca, 0xff, 0x05, 0x6b, 0x3b, 0xc8, 0xdc, 0xb5, 0x3b, 0x1e, 0xb7, 0x2d, 0x4d, 0x47, 0xce, 0x9d, 0xe8, 0x40,
                        0x02, 0x21,
                        0x00, 0x96, 0x46, 0xaf, 0x75, 0x4f, 0x0a, 0x81, 0x00, 0x0c, 0x85, 0xfc, 0x84, 0xee, 0xaf, 0x7f, 0xc4, 0x8a, 0x2e, 0xb4, 0x9c, 0x62, 0xff, 0x31, 0x86, 0x37, 0x54, 0x8f, 0x20, 0xb6, 0xc8, 0x77, 0x50
                },
                {
                        0x30, 0x44,
                        0x02, 0x20,
                        0x39, 0x97, 0xa0, 0x83, 0xd7, 0x74, 0xe6, 0xf6, 0x1c, 0x1a, 0xf5, 0x17, 0xa3, 0xd5, 0x18, 0x44, 0x7c, 0x91, 0x2e, 0x89, 0x69, 0xa1, 0x61, 0x5f, 0x70, 0xf8, 0xfe, 0xfe, 0xce, 0xa6, 0x98, 0xf6,
                        0x02, 0x20,
                        0x23, 0xe2, 0x5b, 0x79, 0xaf, 0x15, 0x6b, 0xd7, 0x02, 0x17, 0xfd, 0xb4, 0xe1, 0x3c, 0x7b, 0xdb, 0xe1, 0xe1, 0x6f, 0xd5, 0xc8, 0x39, 0x8f, 0xb3, 0xb4, 0xb7, 0xde, 0xf3, 0xcf, 0xff, 0xe9, 0x22
                },
                {
                        0x30, 0x46,
                        0x02, 0x21,
                        0x00, 0x9c, 0x3d, 0x52, 0x34, 0x62, 0x69, 0xaa, 0x0d, 0xc7, 0x8e, 0x21, 0x47, 0x94, 0xa4, 0xf4, 0x5a, 0x58, 0x2a, 0xb0, 0x0e, 0x1f, 0x2e, 0x6f, 0x53, 0x57, 0xd0, 0x0d, 0x35, 0x6f, 0x65, 0x3d, 0xcf,
                        0x02, 0x21,
                        0x00, 0xb1, 0xc1, 0x78, 0xa9, 0xa8, 0x7a, 0x45, 0x46, 0x0d, 0xf7, 0x3b, 0xbe, 0x7e, 0xe8, 0x29, 0x62, 0x43, 0x85, 0x82, 0xcd, 0x64, 0x1c, 0x59, 0x8b, 0x50, 0x2c, 0x69, 0x82, 0xf2, 0xfa, 0x34, 0x34
                },
        };
        short[][] r = {
                {0x52, 0x35, 0x22, 0x13, 0xdb, 0x3f, 0xe3, 0xe3, 0xe7, 0x53, 0x95, 0x65, 0x49, 0xcb, 0xca, 0xff, 0x05, 0x6b, 0x3b, 0xc8, 0xdc, 0xb5, 0x3b, 0x1e, 0xb7, 0x2d, 0x4d, 0x47, 0xce, 0x9d, 0xe8, 0x40},
                {0x39, 0x97, 0xa0, 0x83, 0xd7, 0x74, 0xe6, 0xf6, 0x1c, 0x1a, 0xf5, 0x17, 0xa3, 0xd5, 0x18, 0x44, 0x7c, 0x91, 0x2e, 0x89, 0x69, 0xa1, 0x61, 0x5f, 0x70, 0xf8, 0xfe, 0xfe, 0xce, 0xa6, 0x98, 0xf6},
                {0x00, 0x9c, 0x3d, 0x52, 0x34, 0x62, 0x69, 0xaa, 0x0d, 0xc7, 0x8e, 0x21, 0x47, 0x94, 0xa4, 0xf4, 0x5a, 0x58, 0x2a, 0xb0, 0x0e, 0x1f, 0x2e, 0x6f, 0x53, 0x57, 0xd0, 0x0d, 0x35, 0x6f, 0x65, 0x3d, 0xcf},
        };
        short[][] s = {
                {0x00, 0x96, 0x46, 0xaf, 0x75, 0x4f, 0x0a, 0x81, 0x00, 0x0c, 0x85, 0xfc, 0x84, 0xee, 0xaf, 0x7f, 0xc4, 0x8a, 0x2e, 0xb4, 0x9c, 0x62, 0xff, 0x31, 0x86, 0x37, 0x54, 0x8f, 0x20, 0xb6, 0xc8, 0x77, 0x50},
                {0x23, 0xe2, 0x5b, 0x79, 0xaf, 0x15, 0x6b, 0xd7, 0x02, 0x17, 0xfd, 0xb4, 0xe1, 0x3c, 0x7b, 0xdb, 0xe1, 0xe1, 0x6f, 0xd5, 0xc8, 0x39, 0x8f, 0xb3, 0xb4, 0xb7, 0xde, 0xf3, 0xcf, 0xff, 0xe9, 0x22},
                {0x00, 0xb1, 0xc1, 0x78, 0xa9, 0xa8, 0x7a, 0x45, 0x46, 0x0d, 0xf7, 0x3b, 0xbe, 0x7e, 0xe8, 0x29, 0x62, 0x43, 0x85, 0x82, 0xcd, 0x64, 0x1c, 0x59, 0x8b, 0x50, 0x2c, 0x69, 0x82, 0xf2, 0xfa, 0x34, 0x34},
        };
        ASN1_SignatureTestParam[] params = new ASN1_SignatureTestParam[encodedASN1IntSequences.length];
        for (int i=0; i<encodedASN1IntSequences.length; i++) {
            params[i] = new ASN1_SignatureTestParam(convert(encodedASN1IntSequences[i]), convert(r[i]), convert(s[i]));
        }
        return Stream.of(params);
    }

    @ParameterizedTest
    @MethodSource("encoded_ASN1_ES256_SignatureStream")
    void decodeSignaturesWithShortFormLength(ASN1_SignatureTestParam asn1ES256SignatureTestParam) {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "decodeSignaturesWithShortFormLength(byte[] bytes)");

        try {
            tracer.out().printfIndentln("bytes = %s", HexFormat.ofDelimiter(" ").formatHex(asn1ES256SignatureTestParam.encodedSeq()));
            ASN1IntSequence asn1IntSequence = new ASN1IntSequence(asn1ES256SignatureTestParam.encodedSeq());
            tracer.out().printfIndentln("asn1IntSequence = %s", asn1IntSequence);
            ASN1IntSequence.Iterator iter = asn1IntSequence.iterator();
            ASN1Integer r = iter.next();
            assertThat(r.actualBytes()).isEqualTo(asn1ES256SignatureTestParam.r());
            ASN1Integer s = iter.next();
            assertThat(s.actualBytes()).isEqualTo(asn1ES256SignatureTestParam.s());
            assertThat(iter.hasNext()).isFalse();
            assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> iter.next());
        } finally {
            tracer.wayout();
        }
    }

    record ASN1SeqTestParam(ASN1IntSequence asn1IntSequence, ASN1Integer[] asn1Integers) {
        @Override
        public String toString() {
            return "ASN1SeqTestParam[asn1IntSequence = %s, asn1Integers = %s]".formatted(this.asn1IntSequence, Arrays.toString(this.asn1Integers));
        }
    }

    static Stream<ASN1SeqTestParam> asn1IntSequenceStream(int seqCount, int maxIntByteCount, int seqMaxByteCount, int maxSeqLength) {
        AbstractTracer tracer = TracerFactory.getInstance().getCurrentPoolTracer();
        tracer.entry("Stream<ASN1IntSequence>", ASN1Unit.class, "asn1IntSequenceStream()");

        try {
            tracer.out().printfIndentln("seqCount = %d, maxIntByteCount = %d, seqMaxByteCount = %d, maxSeqLength = %d",
                    seqCount, maxIntByteCount, seqMaxByteCount, maxSeqLength);

            ASN1SeqTestParam[] asn1SeqTestParams = new ASN1SeqTestParam[seqCount];
            Random random = new Random();
            int index = 0;
            do {
                int intCount = random.nextInt(maxSeqLength);
                tracer.out().printfIndentln("index = %d, intCount = %d", index, intCount);
                int sum = 0;
                ASN1Integer[] asn1Integers = new ASN1Integer[intCount];
                for (int j=0; j<intCount; j++) {
                    int length = random.nextInt(maxIntByteCount);
                    tracer.out().printfIndentln("length = %d", length);
                    byte[] bytes = new byte[length];
                    random.nextBytes(bytes);
                    ASN1Integer asn1Integer = ASN1Integer.fromBytes(bytes);
                    tracer.out().printfIndentln("asn1Integer = %s", asn1Integer);
                    sum += asn1Integer.asn1Length.rawLength();
                    asn1Integers[j] = asn1Integer;
                }
                tracer.out().printfIndentln("sum = %d", sum);
                if (sum < seqMaxByteCount) {
                    asn1SeqTestParams[index] = new ASN1SeqTestParam(ASN1IntSequence.fromASN1Integers(asn1Integers), asn1Integers);
                    tracer.out().printfIndentln("asn1SeqTestParams[%d] = %s", index, asn1SeqTestParams[index]);
                    index++;
                    if (index >= seqCount) {
                        break;
                    }
                }
                tracer.out().printfIndentln("------------------------------------");
            } while(true);

            return Stream.of(asn1SeqTestParams);
        } finally {
            tracer.wayout();
        }
    }

    static Stream<ASN1SeqTestParam> asn1IntShortSequenceStream() {
        return asn1IntSequenceStream(25, 32, ASN1.SHORT_LENGTH, 16);
    }

    @ParameterizedTest
    @MethodSource("asn1IntShortSequenceStream")
    void randomShortSequencesWithShortInts(ASN1SeqTestParam asn1SeqTestParam) {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "randomShortSequencesWithShortInts(ASN1SeqTestParam asn1SeqTestParam)");

        try {
            tracer.out().printfIndentln("asn1SeqTestParam = %s", asn1SeqTestParam);
            assertThat(asn1SeqTestParam.asn1IntSequence.isShortForm()).isTrue();
            ASN1IntSequence.Iterator iter = asn1SeqTestParam.asn1IntSequence().iterator();
            int index = 0;
            while (iter.hasNext()) {
                ASN1Integer asn1Integer = iter.next();
                tracer.out().printfIndentln("asn1Integer = %s", asn1Integer);
                assertThat(asn1Integer.isShortForm()).isTrue();
                assertThat(asn1Integer.toString()).isEqualTo(asn1SeqTestParam.asn1Integers()[index++].toString());
            }
            assertThat(index).isEqualTo(asn1SeqTestParam.asn1Integers.length);
        } finally {
            tracer.wayout();
        }
    }

    static Stream<ASN1_SignatureTestParam> encoded_ASN1_ES512_SignatureStream() {
        short[][] encodedASN1IntSequences = {
                {
                        0x30, 0x81, 0x87,
                        0x02, 0x42,
                        0x00, 0xf5, 0x2f, 0x87, 0x1c, 0x6f, 0xed, 0x46, 0x1d, 0x8e, 0xb3, 0xbc, 0x44, 0xf7, 0xd6, 0xbb, 0x72, 0x5e, 0xe4, 0x37, 0x93, 0xe4, 0xaf, 0x3e, 0xa2, 0xb0, 0xbd, 0x82, 0xae, 0x65, 0x0e, 0x1b, 0x98, 0xab, 0xd3, 0x5e, 0xc4, 0xc3, 0xe0, 0xf5, 0xe9, 0x12, 0xf9, 0xd3, 0xc7, 0xa6, 0x7d, 0xc3, 0x88, 0x4c, 0x48, 0x55, 0xce, 0xe9, 0x85, 0x98, 0xad, 0xad, 0xce, 0x1e, 0x42, 0xd6, 0xe1, 0x2e, 0x98, 0xc4,
                        0x02, 0x41,
                        0x03, 0x80, 0x21, 0x21, 0x47, 0xe9, 0xbd, 0xdf, 0x55, 0xf3, 0x1e, 0x10, 0xdc, 0x2f, 0xfd, 0x98, 0x51, 0xeb, 0xa5, 0x95, 0x50, 0x68, 0x82, 0xa1, 0xe7, 0xa5, 0xe1, 0x95, 0x77, 0x1e, 0x47, 0xa0, 0x5c, 0x53, 0x1a, 0xbf, 0x4b, 0x21, 0x0c, 0xef, 0x33, 0x34, 0x86, 0xfb, 0x3e, 0x10, 0xa4, 0x2d, 0x9e, 0x2c, 0x5d, 0xc3, 0x82, 0xd2, 0x57, 0xe9, 0x9f, 0x2b, 0x2c, 0x38, 0xac, 0x99, 0xe7, 0x09, 0xe6
                },
                {
                        0x30, 0x81, 0x88,
                        0x02, 0x42,
                        0x00, 0x99, 0x92, 0x76, 0x68, 0x5c, 0x79, 0xb5, 0xfc, 0x57, 0xe1, 0x75, 0xe6, 0x95, 0x0a, 0xf2, 0x42, 0xb7, 0xb6, 0x5e, 0xe3, 0xdc, 0xa2, 0x5f, 0x4d, 0x83, 0x32, 0xf0, 0xa9, 0xbb, 0xd1, 0x14, 0xe9, 0x37, 0x29, 0xc3, 0x9e, 0xfb, 0x84, 0xcd, 0x44, 0xa0, 0x32, 0x63, 0x8d, 0xcf, 0x99, 0x7f, 0x30, 0x7f, 0xe0, 0x3c, 0x36, 0x16, 0x66, 0x6b, 0xe5, 0xf6, 0x79, 0x37, 0xab, 0xd2, 0x13, 0x56, 0x14, 0x0c,
                        0x02, 0x42,
                        0x01, 0x36, 0x48, 0xc2, 0x08, 0x6e, 0x37, 0x38, 0x0f, 0x9d, 0x63, 0x65, 0x02, 0x66, 0x70, 0x3c, 0xd9, 0x1a, 0x2d, 0xc2, 0x34, 0x99, 0x37, 0xe9, 0x63, 0x39, 0xb0, 0xcf, 0xe4, 0xc2, 0xc9, 0x1f, 0x2c, 0xa0, 0x7b, 0xa6, 0x0b, 0x40, 0x1b, 0x44, 0x75, 0x85, 0x93, 0xec, 0x4d, 0xc3, 0xc1, 0xc3, 0x17, 0x82, 0xbc, 0xbd, 0xb0, 0xd2, 0x65, 0xaf, 0x1d, 0xee, 0x6e, 0x7a, 0xc7, 0xc0, 0x98, 0x8f, 0x8b, 0x94
                },
                {
                        0x30, 0x81, 0x86,
                        0x02, 0x41,
                        0x0d, 0x8e, 0x9a, 0x32, 0xca, 0xe3, 0xcd, 0xcd, 0xf5, 0x6c, 0x06, 0xcd, 0xdb, 0x28, 0xca, 0x45, 0xd5, 0x65, 0x3f, 0x38, 0x1a, 0xf6, 0x63, 0x3a, 0x26, 0x5b, 0xdc, 0x57, 0x48, 0x06, 0x47, 0x13, 0x31, 0x93, 0xdf, 0x14, 0x25, 0xd6, 0x7f, 0x54, 0x56, 0x7b, 0x64, 0xdd, 0x20, 0x12, 0xf9, 0x09, 0xbb, 0x31, 0xe3, 0xc1, 0x5b, 0x55, 0xe2, 0xa2, 0x12, 0x5c, 0x70, 0x36, 0xeb, 0x89, 0x92, 0x02, 0x7b,
                        0x02, 0x41,
                        0x2c, 0x23, 0x15, 0xf7, 0x94, 0xec, 0x27, 0xe0, 0x7f, 0xd2, 0xa7, 0x22, 0x48, 0x59, 0x15, 0x74, 0x03, 0xd4, 0x18, 0xad, 0x47, 0xec, 0x3f, 0x01, 0x2a, 0xa5, 0x5b, 0x16, 0x11, 0x97, 0xe4, 0x60, 0x06, 0x88, 0x90, 0x8f, 0xf1, 0xbc, 0xdb, 0x7f, 0x98, 0x44, 0x21, 0x1a, 0xbf, 0xa6, 0xc1, 0x40, 0x4a, 0xa2, 0xb0, 0x32, 0x74, 0x22, 0xb9, 0x20, 0x7f, 0x7c, 0x7b, 0x7c, 0x49, 0xc1, 0xc5, 0xfc, 0xe8
                },
        };
        short[][] r = {
                {0x00, 0xf5, 0x2f, 0x87, 0x1c, 0x6f, 0xed, 0x46, 0x1d, 0x8e, 0xb3, 0xbc, 0x44, 0xf7, 0xd6, 0xbb, 0x72, 0x5e, 0xe4, 0x37, 0x93, 0xe4, 0xaf, 0x3e, 0xa2, 0xb0, 0xbd, 0x82, 0xae, 0x65, 0x0e, 0x1b, 0x98, 0xab, 0xd3, 0x5e, 0xc4, 0xc3, 0xe0, 0xf5, 0xe9, 0x12, 0xf9, 0xd3, 0xc7, 0xa6, 0x7d, 0xc3, 0x88, 0x4c, 0x48, 0x55, 0xce, 0xe9, 0x85, 0x98, 0xad, 0xad, 0xce, 0x1e, 0x42, 0xd6, 0xe1, 0x2e, 0x98, 0xc4},
                {0x00, 0x99, 0x92, 0x76, 0x68, 0x5c, 0x79, 0xb5, 0xfc, 0x57, 0xe1, 0x75, 0xe6, 0x95, 0x0a, 0xf2, 0x42, 0xb7, 0xb6, 0x5e, 0xe3, 0xdc, 0xa2, 0x5f, 0x4d, 0x83, 0x32, 0xf0, 0xa9, 0xbb, 0xd1, 0x14, 0xe9, 0x37, 0x29, 0xc3, 0x9e, 0xfb, 0x84, 0xcd, 0x44, 0xa0, 0x32, 0x63, 0x8d, 0xcf, 0x99, 0x7f, 0x30, 0x7f, 0xe0, 0x3c, 0x36, 0x16, 0x66, 0x6b, 0xe5, 0xf6, 0x79, 0x37, 0xab, 0xd2, 0x13, 0x56, 0x14, 0x0c,},
                {0x0d, 0x8e, 0x9a, 0x32, 0xca, 0xe3, 0xcd, 0xcd, 0xf5, 0x6c, 0x06, 0xcd, 0xdb, 0x28, 0xca, 0x45, 0xd5, 0x65, 0x3f, 0x38, 0x1a, 0xf6, 0x63, 0x3a, 0x26, 0x5b, 0xdc, 0x57, 0x48, 0x06, 0x47, 0x13, 0x31, 0x93, 0xdf, 0x14, 0x25, 0xd6, 0x7f, 0x54, 0x56, 0x7b, 0x64, 0xdd, 0x20, 0x12, 0xf9, 0x09, 0xbb, 0x31, 0xe3, 0xc1, 0x5b, 0x55, 0xe2, 0xa2, 0x12, 0x5c, 0x70, 0x36, 0xeb, 0x89, 0x92, 0x02, 0x7b,},
        };
        short[][] s = {
                {0x03, 0x80, 0x21, 0x21, 0x47, 0xe9, 0xbd, 0xdf, 0x55, 0xf3, 0x1e, 0x10, 0xdc, 0x2f, 0xfd, 0x98, 0x51, 0xeb, 0xa5, 0x95, 0x50, 0x68, 0x82, 0xa1, 0xe7, 0xa5, 0xe1, 0x95, 0x77, 0x1e, 0x47, 0xa0, 0x5c, 0x53, 0x1a, 0xbf, 0x4b, 0x21, 0x0c, 0xef, 0x33, 0x34, 0x86, 0xfb, 0x3e, 0x10, 0xa4, 0x2d, 0x9e, 0x2c, 0x5d, 0xc3, 0x82, 0xd2, 0x57, 0xe9, 0x9f, 0x2b, 0x2c, 0x38, 0xac, 0x99, 0xe7, 0x09, 0xe6},
                {0x01, 0x36, 0x48, 0xc2, 0x08, 0x6e, 0x37, 0x38, 0x0f, 0x9d, 0x63, 0x65, 0x02, 0x66, 0x70, 0x3c, 0xd9, 0x1a, 0x2d, 0xc2, 0x34, 0x99, 0x37, 0xe9, 0x63, 0x39, 0xb0, 0xcf, 0xe4, 0xc2, 0xc9, 0x1f, 0x2c, 0xa0, 0x7b, 0xa6, 0x0b, 0x40, 0x1b, 0x44, 0x75, 0x85, 0x93, 0xec, 0x4d, 0xc3, 0xc1, 0xc3, 0x17, 0x82, 0xbc, 0xbd, 0xb0, 0xd2, 0x65, 0xaf, 0x1d, 0xee, 0x6e, 0x7a, 0xc7, 0xc0, 0x98, 0x8f, 0x8b, 0x94},
                {0x2c, 0x23, 0x15, 0xf7, 0x94, 0xec, 0x27, 0xe0, 0x7f, 0xd2, 0xa7, 0x22, 0x48, 0x59, 0x15, 0x74, 0x03, 0xd4, 0x18, 0xad, 0x47, 0xec, 0x3f, 0x01, 0x2a, 0xa5, 0x5b, 0x16, 0x11, 0x97, 0xe4, 0x60, 0x06, 0x88, 0x90, 0x8f, 0xf1, 0xbc, 0xdb, 0x7f, 0x98, 0x44, 0x21, 0x1a, 0xbf, 0xa6, 0xc1, 0x40, 0x4a, 0xa2, 0xb0, 0x32, 0x74, 0x22, 0xb9, 0x20, 0x7f, 0x7c, 0x7b, 0x7c, 0x49, 0xc1, 0xc5, 0xfc, 0xe8},
        };
        ASN1_SignatureTestParam[] params = new ASN1_SignatureTestParam[encodedASN1IntSequences.length];
        for (int i=0; i<encodedASN1IntSequences.length; i++) {
            params[i] = new ASN1_SignatureTestParam(convert(encodedASN1IntSequences[i]), convert(r[i]), convert(s[i]));
        }
        return Stream.of(params);
    }

    @ParameterizedTest
    @MethodSource("encoded_ASN1_ES512_SignatureStream")
    void decodeSignaturesWithLongFormLength(ASN1_SignatureTestParam asn1_signatureTestParam) {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "decodeSignaturesWithLongFormLength(ASN1_SignatureTestParam asn1_signatureTestParam)");

        try {
            tracer.out().printfIndentln("bytes = %s", HexFormat.ofDelimiter(" ").formatHex(asn1_signatureTestParam.encodedSeq()));
            ASN1IntSequence asn1IntSequence = new ASN1IntSequence(asn1_signatureTestParam.encodedSeq());
            tracer.out().printfIndentln("asn1IntSequence = %s", asn1IntSequence);
            ASN1IntSequence.Iterator iter = asn1IntSequence.iterator();
            ASN1Integer r = iter.next();
            assertThat(r.actualBytes()).isEqualTo(asn1_signatureTestParam.r());
            ASN1Integer s = iter.next();
            assertThat(s.actualBytes()).isEqualTo(asn1_signatureTestParam.s());
            assertThat(iter.hasNext()).isFalse();
            assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(() -> iter.next());
        } finally {
            tracer.wayout();
        }
    }

    static Stream<ASN1SeqTestParam> asn1IntNotSoShortSequenceStream() {
        return asn1IntSequenceStream(25, 64, 255, 8);
    }

    @ParameterizedTest
    @MethodSource("asn1IntNotSoShortSequenceStream")
    void randomNotSoShortSequencesWithShortInts(ASN1SeqTestParam asn1SeqTestParam) {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "randomNotSoShortSequencesWithShortInts(ASN1SeqTestParam asn1SeqTestParam)");

        try {
            tracer.out().printfIndentln("asn1SeqTestParam = %s", asn1SeqTestParam);
            ASN1IntSequence.Iterator iter = asn1SeqTestParam.asn1IntSequence().iterator();
            int index = 0;
            while (iter.hasNext()) {
                ASN1Integer asn1Integer = iter.next();
                tracer.out().printfIndentln("asn1Integer = %s", asn1Integer);
                assertThat(asn1Integer.isShortForm()).isTrue();
                assertThat(asn1Integer.toString()).isEqualTo(asn1SeqTestParam.asn1Integers()[index++].toString());
            }
            assertThat(index).isEqualTo(asn1SeqTestParam.asn1Integers.length);
        } finally {
            tracer.wayout();
        }
    }

    @AfterAll
    void exit() {
        AbstractTracer tracer = getCurrentTracer();
        tracer.entry("void", this, "exit()");

        try {
        } finally {
            tracer.wayout();
        }
    }

    @Override
    public AbstractTracer getCurrentTracer() {
        return TracerFactory.getInstance().getCurrentPoolTracer();
    }
}
